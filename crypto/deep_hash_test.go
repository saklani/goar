package crypto

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDeepHash(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		data := []byte{1, 2, 3}
		r := DeepHash(data)
		h, err := hex.DecodeString("41300af79285f856e833164518c7ec4974f5869ec77ca3458113fe6c587680d050f9f6864fd77f9eb62bd4e2faea9ae8")
		assert.NoError(t, err)
		assert.ElementsMatch(t, h, r[:])
	})
	t.Run("1", func(t *testing.T) {
		var data []byte
		r := DeepHash(data)
		assert.Equal(t, "-_AMxET1_qncO-32KhP7qK6H50RfyRBWeiO-xOuC-tsRQ8QzBpMU2DYpg9w8Lko4", Base64URLEncode(r[:]))
	})
	t.Run("2", func(t *testing.T) {
		data := [][]byte{{1, 2, 3}}
		r := DeepHash(data)
		assert.Equal(t, "48RIKS3zEOKqJgEe5CdqiAQ9xh1L4m_dFcy1deagU5VSF9HXcLN03FPBKAky1QEk", Base64URLEncode(r[:]))
	})
	t.Run("3", func(t *testing.T) {
		data := []byte{1, 2, 3, 4, 5, 6, 7}
		r := DeepHash(data)
		assert.Equal(t, "g2o7Doi92hekMqQoyUDTmdHhTPnLtOth_jClkUmTg1Xqfmhihe6g2Hkxejm9q5uN", Base64URLEncode(r[:]))
	})
	t.Run("4", func(t *testing.T) {
		data := [][]byte{{1, 2, 3, 4, 5, 6, 7}, {}, {1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 5, 6, 7}, {1, 2, 3}}
		r := DeepHash(data)
		assert.Equal(t, "9Tixlu4upVVHyG2EKfH813A4CQJs-3ER30CLeC13nsu6pJ8FtJv2hVJwGuxMZZp0", Base64URLEncode(r[:]))
	})
	t.Run("5", func(t *testing.T) {
		data := [][]byte{{0}}
		r := DeepHash(data)
		assert.Equal(t, "MIPBvgxCUbtsISBhPBxudGTcoY-rb4126Sh_Viw6UuBEatXtbd_3DtmzClY3dSxC", Base64URLEncode(r[:]))
	})
	t.Run("6", func(t *testing.T) {
		data := [][]byte{{}}
		r := DeepHash(data)
		assert.Equal(t, "u_5kojLZOEwkWFm_IWBZj3H4Siy7Ube_IHQ24xCtpQksil7tglh4W8BIHE3aCEOK", Base64URLEncode(r[:]))
	})

	t.Run("7", func(t *testing.T) {
		data := []any{
			[]byte{50},
			[]byte{
				131, 25, 224, 141, 202, 174, 240, 172, 245,
				239, 83, 42, 90, 226, 129, 1, 149, 90, 186,
				109, 28, 170, 226, 169, 6, 220, 7, 230, 205,
				131, 185, 198, 61, 172, 230, 177, 102, 203, 51,
				93, 25, 233, 160, 116, 19, 238, 117, 93, 0, 131,
				240, 115, 141, 22, 6, 168, 166, 114, 84, 127, 196,
				157, 227, 101, 14, 212, 40, 5, 74, 80, 252, 158, 60,
				255, 229, 230, 56, 121, 33, 222, 7, 87, 12, 35,
				60, 203, 106, 2, 151, 162, 165, 164, 2, 38, 193,
				66, 97, 173, 247, 128, 76, 210, 224, 213, 29, 41, 44,
				6, 54, 190, 130, 249, 14, 146, 168, 157, 194, 93, 247,
				48, 136, 186, 229, 137, 17, 202, 1, 19, 51, 202, 20,
				26, 76, 34, 240, 4, 147, 248, 108, 119, 237, 82, 54,
				157, 130, 44, 122, 162, 172, 121, 134, 163, 6, 29, 85,
				138, 110, 130, 100, 75, 163, 54, 217, 244, 234, 225,
				87, 148, 119, 140, 33, 138, 23, 24, 60, 172, 198, 254,
				140, 52, 105, 168, 240, 213, 87, 234, 86, 197, 211, 109,
				9, 231, 123, 213, 215, 95, 32, 236, 193, 6, 34, 41, 219,
				11, 224, 231, 240, 5, 162, 237, 94, 32, 212, 68, 61, 118,
				32, 84, 42, 2, 72, 201, 244, 238, 188, 51, 80, 25, 215, 77,
				149, 253, 48, 227, 100, 32, 196, 27, 36, 71, 170, 101, 125,
				200, 252, 34, 133, 192, 155, 143, 202, 244, 71, 186, 7, 128,
				171, 3, 198, 148, 82, 191, 21, 119, 86, 220, 126, 15, 28, 78,
				81, 249, 252, 82, 71, 85, 185, 28, 211, 245, 20, 108, 213,
				50, 219, 173, 243, 101, 32, 146, 246, 71, 40, 239, 57, 122,
				58, 127, 47, 41, 226, 79, 209, 255, 14, 165, 0, 191, 55, 37,
				41, 87, 97, 237, 184, 112, 152, 251, 235, 49, 48, 248, 41, 137,
				158, 225, 213, 42, 69, 230, 97, 224, 118, 53, 160, 197, 150, 107,
				199, 221, 41, 119, 54, 202, 218, 37, 171, 178, 113, 223, 181, 139,
				184, 3, 27, 73, 226, 40, 93, 128, 121, 11, 123, 233, 64, 2, 106, 102,
				113, 216, 187, 68, 211, 223, 99, 151, 81, 158, 182, 229,
				24, 18, 233, 77, 3, 101, 127, 251, 54, 101, 58, 241,
				135, 220, 184, 61, 199, 172, 158, 164, 200, 150, 238,
				221, 152, 1, 121, 205, 160, 167, 195, 211, 110, 95, 185,
				70, 23, 118, 127, 244, 252, 135, 67, 37, 202, 242, 72,
				118, 189, 181, 250, 225, 67, 53, 52, 129, 46, 5, 77,
				120, 206, 225, 123, 253, 54, 104, 231, 244, 77, 128,
				14, 166, 254, 189, 198, 179, 239, 114, 139, 180, 226,
				199, 4, 110, 83, 19, 173, 32, 205, 180, 169, 134, 47,
				9, 237, 46, 122, 206, 77, 84, 81, 230, 127, 34, 195, 125, 139,
				250, 116, 93, 231, 139, 55, 242, 41, 138, 129, 174, 152, 5,
				156, 95, 240, 122, 62, 252, 230, 220, 176, 99, 215, 237,
			},
			[]byte{},
			[]byte{48},
			[]byte{50, 54, 50, 51, 56, 50},
			[]byte{
				162, 127, 34, 163, 183, 106, 169, 183, 43,
				239, 203, 104, 215, 39, 115, 157, 172, 104,
				203, 90, 39, 197, 234, 98, 181, 217, 99,
				165, 186, 61, 150, 137, 58, 154, 204, 230,
				162, 253, 174, 162, 254, 54, 143, 76, 184,
				182, 239, 29,
			},
			[][]byte{},
			[]byte{52},
			[]byte{
				187, 7, 106, 194, 153, 232, 29, 55,
				182, 223, 177, 8, 16, 131, 162, 205,
				38, 36, 187, 204, 36, 137, 86, 73,
				99, 225, 58, 114, 253, 247, 194, 222,
			},
		}
		r := DeepHash(data)
		assert.Equal(t, "dZ3v54eztF_qMB8iigvrgi0X4P28T1Cs0Fjp1PG5J9Gi-TsU5X1cCpyfwYc1D_P9", Base64URLEncode(r[:]))

	})
}
